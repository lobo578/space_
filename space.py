import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from openai import OpenAI

# =========================
# üîë –£–∫–∞–∂–∏ —Å–≤–æ–π OpenAI –∫–ª—é—á
# =========================
client = OpenAI(api_key="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")

# =========================
# ‚öôÔ∏è –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–æ–¥–∏–Ω —Ä–∞–∑)
# =========================
@st.cache_data
def train_model():
    df = pd.read_csv("TOI_2025.10.05_05.42.17.csv")

    data = df[df['tfopwg_disp'].isin(['PC', 'CP', 'FP'])].copy()
    data['target'] = data['tfopwg_disp'].map({'PC': 1, 'CP': 1, 'FP': 0})

    drop_cols = ['toi', 'tid', 'tfopwg_disp', 'rastr', 'decstr', 'toi_created', 'rowupdate']
    X = data.drop(columns=drop_cols + ['target']).select_dtypes(include=['number']).dropna(axis=1, how='all')
    y = data['target']

    imputer = SimpleImputer(strategy="median")
    X_imputed = imputer.fit_transform(X)

    rf = RandomForestClassifier(n_estimators=200, random_state=42)
    rf.fit(X_imputed, y)

    feature_importances = pd.Series(rf.feature_importances_, index=X.columns)
    top5_features = feature_importances.nlargest(5).index.tolist()

    X_top5 = X[top5_features]
    X_top5_imputed = imputer.fit_transform(X_top5)

    X_train, X_test, y_train, y_test = train_test_split(
        X_top5_imputed, y, test_size=0.2, random_state=42, stratify=y
    )

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)

    mlp_top5 = MLPClassifier(hidden_layer_sizes=(16, 8), activation='relu',
                             solver='adam', max_iter=500, random_state=42)
    mlp_top5.fit(X_train_scaled, y_train)

    return mlp_top5, imputer, scaler, top5_features

mlp_top5, imputer, scaler, top5_features = train_model()

# =========================
# üîÆ –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
# =========================
def predict_exoplanet(input_dict):
    df_input = pd.DataFrame([input_dict])
    df_input_imputed = imputer.transform(df_input)
    df_input_scaled = scaler.transform(df_input_imputed)
    pred = mlp_top5.predict(df_input_scaled)[0]
    return "Exoplanet" if pred == 1 else "Not Exoplanet"

# =========================
# üí¨ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ Streamlit
# =========================
st.set_page_config(page_title="Exoplanet Predictor Chat", page_icon="ü™ê")
st.title("ü™ê Exoplanet Chat ‚Äî AI Exoplanet Predictor")

st.markdown("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–µ—Ç—ã, –∏ AI —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–∞ —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç, –∞ —Ç–∞–∫–∂–µ –æ–±—ä—è—Å–Ω–∏—Ç —Å–≤–æ–π –æ—Ç–≤–µ—Ç.")

if "messages" not in st.session_state:
    st.session_state.messages = []

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# –ü–æ–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with st.expander("üîß –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã"):
    user_input = {}
    for feature in ['pl_eqt', 'pl_insol', 'pl_tranmid', 'st_tmag', 'pl_rade']:
        val = st.text_input(f"{feature}:", placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ...")
        if val:
            try:
                user_input[feature] = float(val)
            except ValueError:
                st.warning(f"{feature} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

# –ß–∞—Ç
if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã ‚Äî –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    if len(user_input) == 5:
        prediction = predict_exoplanet(user_input)

        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç GPT
        response = client.chat.completions.create(
            model="gpt-5",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–±—ä—è—Å–Ω—è–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."},
                {"role": "user", "content": f"–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö {user_input} –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞: {prediction}. –û–±—ä—è—Å–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–Ω—è—Ç–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."}
            ]
        )
        answer = response.choices[0].message.content

        final_response = f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {prediction}\n\n**–ü–æ—è—Å–Ω–µ–Ω–∏–µ:** {answer}"
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏–º —Å GPT
        response = client.chat.completions.create(
            model="gpt-5",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç –æ–± —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–∞—Ö –∏ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º."},
                *st.session_state.messages
            ]
        )
        final_response = response.choices[0].message.content

    st.session_state.messages.append({"role": "assistant", "content": final_response})
    with st.chat_message("assistant"):
        st.markdown(final_response)
